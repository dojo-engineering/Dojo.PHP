<?php
/**
 * CreatePaymentIntentRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dojo_PHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Unified Payments API
 *
 * # Introduction  The Dojo Universal Payments API (UPAPI) is RESTful. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body.  ## Base URLs  Use the following base URL when making requests to the API: [https://staging-api.dojo.dev/master](https://staging-api.dojo.dev/master)  ## Authentication  The API uses [Basic HTTP auth](https://en.wikipedia.org/wiki/Basic_access_authentication). You can generate API keys in [Developer Portal](https://developer.dojo.tech). Secret keys for the test environment have the prefix `sk_sandbox_` and for production have the prefix `sk_prod_`.  You must include your secret API key in the header of all requests, for example:  ```curl curl   --header 'content-type: application/json' \\   --header 'Authorization: Basic sk_prod_your_key' \\ ... ```  API requests without authentication will fail.  ## Additional Required Headers  The following headers are required on all API requests, requests without them will fail.  `reseller-id` - Identifies the reseller who sells software on behalf of the EPOS company. This value will be unique and provided by Dojo to each reseller.   `software-house-id` - Identifies the EPOS company whose software is generating the request. This value shouldn't be configurable as it will remain the same for all customers using particular EPOS software. This value will be provided by Dojo.  ## HTTP Responses  The API returns standard HTTP response codes [RFC 7231](https://tools.ietf.org/html/rfc7231#section-6) on each request to indicate the success or otherwise of API requests. HTTP status codes summary are listed below:  * `200 OK` — The request was successful.  * `201 Created` — The request was successful, and a new resource was created as a result.  * `204 No Content` — The request was successful, but there is no content to send.  * `400 Bad Request` — Bad request, probably due to a syntax error.  * `401 Unauthorized` — Authentication required.  * `403 Forbidden` — The API key doesn't have permissions.  * `404 Not Found` — The resource doesn't exist.  * `405 Method Not Allowed` — The request method is known by the server but isn't supported by the target resource.  * `409 Conflict`—The request couldn't be completed because it conflicted with another request or the server's configuration.  * `500`, `502`, `503`, `504` `Server Errors` — An unexpected error occurred with our API, please reach out to support.  ## Errors   The API follows the error response format proposed in [RFC 7807](https://tools.ietf.org/html/rfc7807) also known as Problem Details for HTTP APIs. All errors are returned in the form of JSON.  ### Error Schema  In case of an error, the response object contains the following fields: The error object contains the following fields: * `type` [string] — A URI reference RFC 3986 that identifies the problem type.  * `code` [ErrorCode] — A short, machine-readable description of the error.  * `title` [string] — A short, human-readable summary of the error.  * `detail` [string] — A human-readable message giving more details about the error. Not always present.  * `status` [integer] — The HTTP status code.  * `traceId` [string] — The unique identifier of the failing request.  The following example shows a possible error response:  ```json {     \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",     \"code\": \"INVALID_REQUEST\",     \"title\": \"One or more validation errors occurred.\",     \"detail\": \"amount missing\",     \"status\": 400,     \"traceId\": \"00-a405f077df056a498323ffbcec05923f-aa63e6f4dbbc734a-01\", } ```  ## Versioning  Dojo API uses the yyyy-mm-dd API version-naming scheme. You have to pass the version as the `version` header in all API calls, for example:  ``` curl curl   --header 'content-type: application/json' \\   --header 'Authorization: Basic sk_prod_your_key' \\   --header 'version: Pre-release' \\ ```  When [breaking changes](../payments/development-resources/versioning-overview#breaking-changes) are made to the API, the current version listed below will be updated.   The current version is `Pre-release`.
 *
 * The version of the OpenAPI document: 2023-12-15
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dojo_PHP\Model;

use \ArrayAccess;
use \Dojo_PHP\ObjectSerializer;

/**
 * CreatePaymentIntentRequest Class Doc Comment
 *
 * @category Class
 * @description The payment intent request object.
 * @package  Dojo_PHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreatePaymentIntentRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreatePaymentIntentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'capture_mode' => '\Dojo_PHP\Model\CreatePaymentIntentRequestCaptureMode',
        'amount' => '\Dojo_PHP\Model\Money',
        'tips_amount' => '\Dojo_PHP\Model\CreatePaymentIntentRequestTipsAmount',
        'reference' => 'string',
        'description' => 'string',
        'customer' => '\Dojo_PHP\Model\CreatePaymentIntentRequestCustomer',
        'billing_address' => '\Dojo_PHP\Model\CreatePaymentIntentRequestBillingAddress',
        'shipping_details' => '\Dojo_PHP\Model\CreatePaymentIntentRequestShippingDetails',
        'transaction_source' => '\Dojo_PHP\Model\CreatePaymentIntentRequestTransactionSource',
        'config' => '\Dojo_PHP\Model\CreatePaymentIntentRequestConfig',
        'request_security' => '\Dojo_PHP\Model\CreatePaymentIntentRequestRequestSecurity',
        'item_lines' => '\Dojo_PHP\Model\ItemLine[]',
        'tax_lines' => '\Dojo_PHP\Model\TaxLine[]',
        'payment_methods' => '\Dojo_PHP\Model\PaymentMethod[]',
        'action_link' => '\Dojo_PHP\Model\CreatePaymentIntentRequestActionLink',
        'expire_at' => '\DateTime',
        'auto_expire_in' => 'string',
        'auto_expire_action' => '\Dojo_PHP\Model\CreatePaymentIntentRequestAutoExpireAction',
        'metadata' => 'array<string,string>',
        'setup_intent_id' => 'string',
        'cashback_amount' => '\Dojo_PHP\Model\Money',
        'service_charge_amount' => '\Dojo_PHP\Model\Money'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'capture_mode' => null,
        'amount' => null,
        'tips_amount' => null,
        'reference' => null,
        'description' => null,
        'customer' => null,
        'billing_address' => null,
        'shipping_details' => null,
        'transaction_source' => null,
        'config' => null,
        'request_security' => null,
        'item_lines' => null,
        'tax_lines' => null,
        'payment_methods' => null,
        'action_link' => null,
        'expire_at' => 'date-time',
        'auto_expire_in' => 'timespan',
        'auto_expire_action' => null,
        'metadata' => null,
        'setup_intent_id' => null,
        'cashback_amount' => null,
        'service_charge_amount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'capture_mode' => false,
		'amount' => false,
		'tips_amount' => true,
		'reference' => false,
		'description' => true,
		'customer' => true,
		'billing_address' => true,
		'shipping_details' => true,
		'transaction_source' => true,
		'config' => true,
		'request_security' => true,
		'item_lines' => true,
		'tax_lines' => true,
		'payment_methods' => true,
		'action_link' => true,
		'expire_at' => true,
		'auto_expire_in' => true,
		'auto_expire_action' => true,
		'metadata' => true,
		'setup_intent_id' => true,
		'cashback_amount' => false,
		'service_charge_amount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'capture_mode' => 'captureMode',
        'amount' => 'amount',
        'tips_amount' => 'tipsAmount',
        'reference' => 'reference',
        'description' => 'description',
        'customer' => 'customer',
        'billing_address' => 'billingAddress',
        'shipping_details' => 'shippingDetails',
        'transaction_source' => 'transactionSource',
        'config' => 'config',
        'request_security' => 'requestSecurity',
        'item_lines' => 'itemLines',
        'tax_lines' => 'taxLines',
        'payment_methods' => 'paymentMethods',
        'action_link' => 'actionLink',
        'expire_at' => 'expireAt',
        'auto_expire_in' => 'autoExpireIn',
        'auto_expire_action' => 'autoExpireAction',
        'metadata' => 'metadata',
        'setup_intent_id' => 'setupIntentId',
        'cashback_amount' => 'cashbackAmount',
        'service_charge_amount' => 'serviceChargeAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'capture_mode' => 'setCaptureMode',
        'amount' => 'setAmount',
        'tips_amount' => 'setTipsAmount',
        'reference' => 'setReference',
        'description' => 'setDescription',
        'customer' => 'setCustomer',
        'billing_address' => 'setBillingAddress',
        'shipping_details' => 'setShippingDetails',
        'transaction_source' => 'setTransactionSource',
        'config' => 'setConfig',
        'request_security' => 'setRequestSecurity',
        'item_lines' => 'setItemLines',
        'tax_lines' => 'setTaxLines',
        'payment_methods' => 'setPaymentMethods',
        'action_link' => 'setActionLink',
        'expire_at' => 'setExpireAt',
        'auto_expire_in' => 'setAutoExpireIn',
        'auto_expire_action' => 'setAutoExpireAction',
        'metadata' => 'setMetadata',
        'setup_intent_id' => 'setSetupIntentId',
        'cashback_amount' => 'setCashbackAmount',
        'service_charge_amount' => 'setServiceChargeAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'capture_mode' => 'getCaptureMode',
        'amount' => 'getAmount',
        'tips_amount' => 'getTipsAmount',
        'reference' => 'getReference',
        'description' => 'getDescription',
        'customer' => 'getCustomer',
        'billing_address' => 'getBillingAddress',
        'shipping_details' => 'getShippingDetails',
        'transaction_source' => 'getTransactionSource',
        'config' => 'getConfig',
        'request_security' => 'getRequestSecurity',
        'item_lines' => 'getItemLines',
        'tax_lines' => 'getTaxLines',
        'payment_methods' => 'getPaymentMethods',
        'action_link' => 'getActionLink',
        'expire_at' => 'getExpireAt',
        'auto_expire_in' => 'getAutoExpireIn',
        'auto_expire_action' => 'getAutoExpireAction',
        'metadata' => 'getMetadata',
        'setup_intent_id' => 'getSetupIntentId',
        'cashback_amount' => 'getCashbackAmount',
        'service_charge_amount' => 'getServiceChargeAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('capture_mode', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('tips_amount', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('billing_address', $data ?? [], null);
        $this->setIfExists('shipping_details', $data ?? [], null);
        $this->setIfExists('transaction_source', $data ?? [], null);
        $this->setIfExists('config', $data ?? [], null);
        $this->setIfExists('request_security', $data ?? [], null);
        $this->setIfExists('item_lines', $data ?? [], null);
        $this->setIfExists('tax_lines', $data ?? [], null);
        $this->setIfExists('payment_methods', $data ?? [], null);
        $this->setIfExists('action_link', $data ?? [], null);
        $this->setIfExists('expire_at', $data ?? [], null);
        $this->setIfExists('auto_expire_in', $data ?? [], null);
        $this->setIfExists('auto_expire_action', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('setup_intent_id', $data ?? [], null);
        $this->setIfExists('cashback_amount', $data ?? [], null);
        $this->setIfExists('service_charge_amount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        if ((mb_strlen($this->container['reference']) > 60)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 60.";
        }

        if ((mb_strlen($this->container['reference']) < 1)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 4096)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 4096.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets capture_mode
     *
     * @return \Dojo_PHP\Model\CreatePaymentIntentRequestCaptureMode|null
     */
    public function getCaptureMode()
    {
        return $this->container['capture_mode'];
    }

    /**
     * Sets capture_mode
     *
     * @param \Dojo_PHP\Model\CreatePaymentIntentRequestCaptureMode|null $capture_mode capture_mode
     *
     * @return self
     */
    public function setCaptureMode($capture_mode)
    {
        if (is_null($capture_mode)) {
            throw new \InvalidArgumentException('non-nullable capture_mode cannot be null');
        }
        $this->container['capture_mode'] = $capture_mode;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \Dojo_PHP\Model\Money
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Dojo_PHP\Model\Money $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets tips_amount
     *
     * @return \Dojo_PHP\Model\CreatePaymentIntentRequestTipsAmount|null
     */
    public function getTipsAmount()
    {
        return $this->container['tips_amount'];
    }

    /**
     * Sets tips_amount
     *
     * @param \Dojo_PHP\Model\CreatePaymentIntentRequestTipsAmount|null $tips_amount tips_amount
     *
     * @return self
     */
    public function setTipsAmount($tips_amount)
    {
        if (is_null($tips_amount)) {
            array_push($this->openAPINullablesSetToNull, 'tips_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tips_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tips_amount'] = $tips_amount;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Details of the reference for the payment.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        if ((mb_strlen($reference) > 60)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling CreatePaymentIntentRequest., must be smaller than or equal to 60.');
        }
        if ((mb_strlen($reference) < 1)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling CreatePaymentIntentRequest., must be bigger than or equal to 1.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The payment description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CreatePaymentIntentRequest., must be smaller than or equal to 4096.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Dojo_PHP\Model\CreatePaymentIntentRequestCustomer|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Dojo_PHP\Model\CreatePaymentIntentRequestCustomer|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            array_push($this->openAPINullablesSetToNull, 'customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \Dojo_PHP\Model\CreatePaymentIntentRequestBillingAddress|null
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \Dojo_PHP\Model\CreatePaymentIntentRequestBillingAddress|null $billing_address billing_address
     *
     * @return self
     */
    public function setBillingAddress($billing_address)
    {
        if (is_null($billing_address)) {
            array_push($this->openAPINullablesSetToNull, 'billing_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets shipping_details
     *
     * @return \Dojo_PHP\Model\CreatePaymentIntentRequestShippingDetails|null
     */
    public function getShippingDetails()
    {
        return $this->container['shipping_details'];
    }

    /**
     * Sets shipping_details
     *
     * @param \Dojo_PHP\Model\CreatePaymentIntentRequestShippingDetails|null $shipping_details shipping_details
     *
     * @return self
     */
    public function setShippingDetails($shipping_details)
    {
        if (is_null($shipping_details)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_details', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_details'] = $shipping_details;

        return $this;
    }

    /**
     * Gets transaction_source
     *
     * @return \Dojo_PHP\Model\CreatePaymentIntentRequestTransactionSource|null
     */
    public function getTransactionSource()
    {
        return $this->container['transaction_source'];
    }

    /**
     * Sets transaction_source
     *
     * @param \Dojo_PHP\Model\CreatePaymentIntentRequestTransactionSource|null $transaction_source transaction_source
     *
     * @return self
     */
    public function setTransactionSource($transaction_source)
    {
        if (is_null($transaction_source)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transaction_source'] = $transaction_source;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \Dojo_PHP\Model\CreatePaymentIntentRequestConfig|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \Dojo_PHP\Model\CreatePaymentIntentRequestConfig|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        if (is_null($config)) {
            array_push($this->openAPINullablesSetToNull, 'config');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('config', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets request_security
     *
     * @return \Dojo_PHP\Model\CreatePaymentIntentRequestRequestSecurity|null
     */
    public function getRequestSecurity()
    {
        return $this->container['request_security'];
    }

    /**
     * Sets request_security
     *
     * @param \Dojo_PHP\Model\CreatePaymentIntentRequestRequestSecurity|null $request_security request_security
     *
     * @return self
     */
    public function setRequestSecurity($request_security)
    {
        if (is_null($request_security)) {
            array_push($this->openAPINullablesSetToNull, 'request_security');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('request_security', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['request_security'] = $request_security;

        return $this;
    }

    /**
     * Gets item_lines
     *
     * @return \Dojo_PHP\Model\ItemLine[]|null
     */
    public function getItemLines()
    {
        return $this->container['item_lines'];
    }

    /**
     * Sets item_lines
     *
     * @param \Dojo_PHP\Model\ItemLine[]|null $item_lines The line items purchased by the customer.
     *
     * @return self
     */
    public function setItemLines($item_lines)
    {
        if (is_null($item_lines)) {
            array_push($this->openAPINullablesSetToNull, 'item_lines');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_lines', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['item_lines'] = $item_lines;

        return $this;
    }

    /**
     * Gets tax_lines
     *
     * @return \Dojo_PHP\Model\TaxLine[]|null
     */
    public function getTaxLines()
    {
        return $this->container['tax_lines'];
    }

    /**
     * Sets tax_lines
     *
     * @param \Dojo_PHP\Model\TaxLine[]|null $tax_lines The taxes applied to the items.
     *
     * @return self
     */
    public function setTaxLines($tax_lines)
    {
        if (is_null($tax_lines)) {
            array_push($this->openAPINullablesSetToNull, 'tax_lines');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_lines', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_lines'] = $tax_lines;

        return $this;
    }

    /**
     * Gets payment_methods
     *
     * @return \Dojo_PHP\Model\PaymentMethod[]|null
     */
    public function getPaymentMethods()
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     *
     * @param \Dojo_PHP\Model\PaymentMethod[]|null $payment_methods The payment methods that customers can use to pay.
     *
     * @return self
     */
    public function setPaymentMethods($payment_methods)
    {
        if (is_null($payment_methods)) {
            array_push($this->openAPINullablesSetToNull, 'payment_methods');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_methods', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }

    /**
     * Gets action_link
     *
     * @return \Dojo_PHP\Model\CreatePaymentIntentRequestActionLink|null
     */
    public function getActionLink()
    {
        return $this->container['action_link'];
    }

    /**
     * Sets action_link
     *
     * @param \Dojo_PHP\Model\CreatePaymentIntentRequestActionLink|null $action_link action_link
     *
     * @return self
     */
    public function setActionLink($action_link)
    {
        if (is_null($action_link)) {
            array_push($this->openAPINullablesSetToNull, 'action_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('action_link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['action_link'] = $action_link;

        return $this;
    }

    /**
     * Gets expire_at
     *
     * @return \DateTime|null
     */
    public function getExpireAt()
    {
        return $this->container['expire_at'];
    }

    /**
     * Sets expire_at
     *
     * @param \DateTime|null $expire_at The timestamp and date of when a payment intent will be voided, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) UTC format. This occurs when a payment intent is created and not yet authorized. If `null`, the payment intent is voided after 30 days.
     *
     * @return self
     */
    public function setExpireAt($expire_at)
    {
        if (is_null($expire_at)) {
            array_push($this->openAPINullablesSetToNull, 'expire_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expire_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expire_at'] = $expire_at;

        return $this;
    }

    /**
     * Gets auto_expire_in
     *
     * @return string|null
     */
    public function getAutoExpireIn()
    {
        return $this->container['auto_expire_in'];
    }

    /**
     * Sets auto_expire_in
     *
     * @param string|null $auto_expire_in The time interval after which `paymentIntent: Manual` will be captured or reversed, in `dd.hh:MM:ss` format. The timestamp value must be more than 30 seconds and less than 7 days.
     *
     * @return self
     */
    public function setAutoExpireIn($auto_expire_in)
    {
        if (is_null($auto_expire_in)) {
            array_push($this->openAPINullablesSetToNull, 'auto_expire_in');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auto_expire_in', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['auto_expire_in'] = $auto_expire_in;

        return $this;
    }

    /**
     * Gets auto_expire_action
     *
     * @return \Dojo_PHP\Model\CreatePaymentIntentRequestAutoExpireAction|null
     */
    public function getAutoExpireAction()
    {
        return $this->container['auto_expire_action'];
    }

    /**
     * Sets auto_expire_action
     *
     * @param \Dojo_PHP\Model\CreatePaymentIntentRequestAutoExpireAction|null $auto_expire_action auto_expire_action
     *
     * @return self
     */
    public function setAutoExpireAction($auto_expire_action)
    {
        if (is_null($auto_expire_action)) {
            array_push($this->openAPINullablesSetToNull, 'auto_expire_action');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auto_expire_action', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['auto_expire_action'] = $auto_expire_action;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata A set of key-value pairs that you can use to store additional information.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets setup_intent_id
     *
     * @return string|null
     */
    public function getSetupIntentId()
    {
        return $this->container['setup_intent_id'];
    }

    /**
     * Sets setup_intent_id
     *
     * @param string|null $setup_intent_id The unique identifier for the setup intent.
     *
     * @return self
     */
    public function setSetupIntentId($setup_intent_id)
    {
        if (is_null($setup_intent_id)) {
            array_push($this->openAPINullablesSetToNull, 'setup_intent_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('setup_intent_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['setup_intent_id'] = $setup_intent_id;

        return $this;
    }

    /**
     * Gets cashback_amount
     *
     * @return \Dojo_PHP\Model\Money|null
     */
    public function getCashbackAmount()
    {
        return $this->container['cashback_amount'];
    }

    /**
     * Sets cashback_amount
     *
     * @param \Dojo_PHP\Model\Money|null $cashback_amount cashback_amount
     *
     * @return self
     */
    public function setCashbackAmount($cashback_amount)
    {
        if (is_null($cashback_amount)) {
            throw new \InvalidArgumentException('non-nullable cashback_amount cannot be null');
        }
        $this->container['cashback_amount'] = $cashback_amount;

        return $this;
    }

    /**
     * Gets service_charge_amount
     *
     * @return \Dojo_PHP\Model\Money|null
     */
    public function getServiceChargeAmount()
    {
        return $this->container['service_charge_amount'];
    }

    /**
     * Sets service_charge_amount
     *
     * @param \Dojo_PHP\Model\Money|null $service_charge_amount service_charge_amount
     *
     * @return self
     */
    public function setServiceChargeAmount($service_charge_amount)
    {
        if (is_null($service_charge_amount)) {
            throw new \InvalidArgumentException('non-nullable service_charge_amount cannot be null');
        }
        $this->container['service_charge_amount'] = $service_charge_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


