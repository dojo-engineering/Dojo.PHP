<?php
/**
 * CustomersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Dojo_PHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Unified Payments API
 *
 * # Introduction  The Dojo Universal Payments API (UPAPI) is RESTful. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body.  ## Base URLs  Use the following base URL when making requests to the API: [https://staging-api.dojo.dev/master](https://staging-api.dojo.dev/master)  ## Authentication  The API uses [Basic HTTP auth](https://en.wikipedia.org/wiki/Basic_access_authentication). You can generate API keys in [Developer Portal](https://developer.dojo.tech). Secret keys for the test environment have the prefix `sk_sandbox_` and for production have the prefix `sk_prod_`.  You must include your secret API key in the header of all requests, for example:  ```curl curl   --header 'content-type: application/json' \\   --header 'Authorization: Basic sk_prod_your_key' \\ ... ```  API requests without authentication will fail.  ## Additional Required Headers  The following headers are required on all API requests, requests without them will fail.  `reseller-id` - Identifies the reseller who sells software on behalf of the EPOS company. This value will be unique and provided by Dojo to each reseller.   `software-house-id` - Identifies the EPOS company whose software is generating the request. This value shouldn't be configurable as it will remain the same for all customers using particular EPOS software. This value will be provided by Dojo.  ## HTTP Responses  The API returns standard HTTP response codes [RFC 7231](https://tools.ietf.org/html/rfc7231#section-6) on each request to indicate the success or otherwise of API requests. HTTP status codes summary are listed below:  * `200 OK` — The request was successful.  * `201 Created` — The request was successful, and a new resource was created as a result.  * `204 No Content` — The request was successful, but there is no content to send.  * `400 Bad Request` — Bad request, probably due to a syntax error.  * `401 Unauthorized` — Authentication required.  * `403 Forbidden` — The API key doesn't have permissions.  * `404 Not Found` — The resource doesn't exist.  * `405 Method Not Allowed` — The request method is known by the server but isn't supported by the target resource.  * `409 Conflict`—The request couldn't be completed because it conflicted with another request or the server's configuration.  * `500`, `502`, `503`, `504` `Server Errors` — An unexpected error occurred with our API, please reach out to support.  ## Errors   The API follows the error response format proposed in [RFC 7807](https://tools.ietf.org/html/rfc7807) also known as Problem Details for HTTP APIs. All errors are returned in the form of JSON.  ### Error Schema  In case of an error, the response object contains the following fields: The error object contains the following fields: * `type` [string] — A URI reference RFC 3986 that identifies the problem type.  * `code` [ErrorCode] — A short, machine-readable description of the error.  * `title` [string] — A short, human-readable summary of the error.  * `detail` [string] — A human-readable message giving more details about the error. Not always present.  * `status` [integer] — The HTTP status code.  * `traceId` [string] — The unique identifier of the failing request.  The following example shows a possible error response:  ```json {     \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",     \"code\": \"INVALID_REQUEST\",     \"title\": \"One or more validation errors occurred.\",     \"detail\": \"amount missing\",     \"status\": 400,     \"traceId\": \"00-a405f077df056a498323ffbcec05923f-aa63e6f4dbbc734a-01\", } ```  ## Versioning  Dojo API uses the yyyy-mm-dd API version-naming scheme. You have to pass the version as the `version` header in all API calls, for example:  ``` curl curl   --header 'content-type: application/json' \\   --header 'Authorization: Basic sk_prod_your_key' \\   --header 'version: Pre-release' \\ ```  When [breaking changes](../payments/development-resources/versioning-overview#breaking-changes) are made to the API, the current version listed below will be updated.   The current version is `Pre-release`.
 *
 * The version of the OpenAPI document: 2023-12-15
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dojo_PHP\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Dojo_PHP\ApiException;
use Dojo_PHP\Configuration;
use Dojo_PHP\HeaderSelector;
use Dojo_PHP\ObjectSerializer;

/**
 * CustomersApi Class Doc Comment
 *
 * @category Class
 * @package  Dojo_PHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'customersCreate' => [
            'application/json',
        ],
        'customersCreateCustomerSecret' => [
            'application/json',
        ],
        'customersDelete' => [
            'application/json',
        ],
        'customersDeletePaymentMethod' => [
            'application/json',
        ],
        'customersGet' => [
            'application/json',
        ],
        'customersGetPaymentMethods' => [
            'application/json',
        ],
        'customersSearch' => [
            'application/json',
        ],
        'customersUpdate' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation customersCreate
     *
     * Create a customer
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  \Dojo_PHP\Model\CreateCustomerRequest $create_customer_request create_customer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersCreate'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dojo_PHP\Model\CustomerFull|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails
     */
    public function customersCreate($version, $create_customer_request, string $contentType = self::contentTypes['customersCreate'][0])
    {
        list($response) = $this->customersCreateWithHttpInfo($version, $create_customer_request, $contentType);
        return $response;
    }

    /**
     * Operation customersCreateWithHttpInfo
     *
     * Create a customer
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  \Dojo_PHP\Model\CreateCustomerRequest $create_customer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersCreate'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dojo_PHP\Model\CustomerFull|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCreateWithHttpInfo($version, $create_customer_request, string $contentType = self::contentTypes['customersCreate'][0])
    {
        $request = $this->customersCreateRequest($version, $create_customer_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Dojo_PHP\Model\CustomerFull' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\CustomerFull' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\CustomerFull', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Dojo_PHP\Model\CustomerFull';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\CustomerFull',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCreateAsync
     *
     * Create a customer
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  \Dojo_PHP\Model\CreateCustomerRequest $create_customer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCreateAsync($version, $create_customer_request, string $contentType = self::contentTypes['customersCreate'][0])
    {
        return $this->customersCreateAsyncWithHttpInfo($version, $create_customer_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCreateAsyncWithHttpInfo
     *
     * Create a customer
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  \Dojo_PHP\Model\CreateCustomerRequest $create_customer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCreateAsyncWithHttpInfo($version, $create_customer_request, string $contentType = self::contentTypes['customersCreate'][0])
    {
        $returnType = '\Dojo_PHP\Model\CustomerFull';
        $request = $this->customersCreateRequest($version, $create_customer_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCreate'
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  \Dojo_PHP\Model\CreateCustomerRequest $create_customer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customersCreateRequest($version, $create_customer_request, string $contentType = self::contentTypes['customersCreate'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling customersCreate'
            );
        }

        // verify the required parameter 'create_customer_request' is set
        if ($create_customer_request === null || (is_array($create_customer_request) && count($create_customer_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_customer_request when calling customersCreate'
            );
        }


        $resourcePath = '/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($version !== null) {
            $headerParams['version'] = ObjectSerializer::toHeaderValue($version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_customer_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_customer_request));
            } else {
                $httpBody = $create_customer_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCreateCustomerSecret
     *
     * Create a customer secret
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersCreateCustomerSecret'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dojo_PHP\Model\CustomerSecret|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails
     */
    public function customersCreateCustomerSecret($customer_id, $version, string $contentType = self::contentTypes['customersCreateCustomerSecret'][0])
    {
        list($response) = $this->customersCreateCustomerSecretWithHttpInfo($customer_id, $version, $contentType);
        return $response;
    }

    /**
     * Operation customersCreateCustomerSecretWithHttpInfo
     *
     * Create a customer secret
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersCreateCustomerSecret'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dojo_PHP\Model\CustomerSecret|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCreateCustomerSecretWithHttpInfo($customer_id, $version, string $contentType = self::contentTypes['customersCreateCustomerSecret'][0])
    {
        $request = $this->customersCreateCustomerSecretRequest($customer_id, $version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Dojo_PHP\Model\CustomerSecret' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\CustomerSecret' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\CustomerSecret', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Dojo_PHP\Model\CustomerSecret';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\CustomerSecret',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCreateCustomerSecretAsync
     *
     * Create a customer secret
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersCreateCustomerSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCreateCustomerSecretAsync($customer_id, $version, string $contentType = self::contentTypes['customersCreateCustomerSecret'][0])
    {
        return $this->customersCreateCustomerSecretAsyncWithHttpInfo($customer_id, $version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCreateCustomerSecretAsyncWithHttpInfo
     *
     * Create a customer secret
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersCreateCustomerSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCreateCustomerSecretAsyncWithHttpInfo($customer_id, $version, string $contentType = self::contentTypes['customersCreateCustomerSecret'][0])
    {
        $returnType = '\Dojo_PHP\Model\CustomerSecret';
        $request = $this->customersCreateCustomerSecretRequest($customer_id, $version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCreateCustomerSecret'
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersCreateCustomerSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customersCreateCustomerSecretRequest($customer_id, $version, string $contentType = self::contentTypes['customersCreateCustomerSecret'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling customersCreateCustomerSecret'
            );
        }
        if (strlen($customer_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$customer_id" when calling CustomersApi.customersCreateCustomerSecret, must be smaller than or equal to 100.');
        }
        
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling customersCreateCustomerSecret'
            );
        }


        $resourcePath = '/customers/{customerId}/create-secret';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($version !== null) {
            $headerParams['version'] = ObjectSerializer::toHeaderValue($version);
        }

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersDelete
     *
     * Delete a customer
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersDelete'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function customersDelete($customer_id, $version, string $contentType = self::contentTypes['customersDelete'][0])
    {
        $this->customersDeleteWithHttpInfo($customer_id, $version, $contentType);
    }

    /**
     * Operation customersDeleteWithHttpInfo
     *
     * Delete a customer
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersDelete'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersDeleteWithHttpInfo($customer_id, $version, string $contentType = self::contentTypes['customersDelete'][0])
    {
        $request = $this->customersDeleteRequest($customer_id, $version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersDeleteAsync
     *
     * Delete a customer
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersDeleteAsync($customer_id, $version, string $contentType = self::contentTypes['customersDelete'][0])
    {
        return $this->customersDeleteAsyncWithHttpInfo($customer_id, $version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersDeleteAsyncWithHttpInfo
     *
     * Delete a customer
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersDeleteAsyncWithHttpInfo($customer_id, $version, string $contentType = self::contentTypes['customersDelete'][0])
    {
        $returnType = '';
        $request = $this->customersDeleteRequest($customer_id, $version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersDelete'
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customersDeleteRequest($customer_id, $version, string $contentType = self::contentTypes['customersDelete'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling customersDelete'
            );
        }
        if (strlen($customer_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$customer_id" when calling CustomersApi.customersDelete, must be smaller than or equal to 100.');
        }
        
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling customersDelete'
            );
        }


        $resourcePath = '/customers/{customerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($version !== null) {
            $headerParams['version'] = ObjectSerializer::toHeaderValue($version);
        }

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersDeletePaymentMethod
     *
     * Remove payment method
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  string $payment_method_id The unique identifier of the customer payment method. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $authorization Basic HTTP authentication to grant access to customer owned resources.  - The required customer secret key is short lived and will expire after pre-configured set of time.  - The customer secret can be generated by calling [POST /customers/{customerId}/create-secret](#operation/Customers_CreateCustomerSecret) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersDeletePaymentMethod'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function customersDeletePaymentMethod($customer_id, $payment_method_id, $version, $authorization, string $contentType = self::contentTypes['customersDeletePaymentMethod'][0])
    {
        $this->customersDeletePaymentMethodWithHttpInfo($customer_id, $payment_method_id, $version, $authorization, $contentType);
    }

    /**
     * Operation customersDeletePaymentMethodWithHttpInfo
     *
     * Remove payment method
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  string $payment_method_id The unique identifier of the customer payment method. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $authorization Basic HTTP authentication to grant access to customer owned resources.  - The required customer secret key is short lived and will expire after pre-configured set of time.  - The customer secret can be generated by calling [POST /customers/{customerId}/create-secret](#operation/Customers_CreateCustomerSecret) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersDeletePaymentMethod'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersDeletePaymentMethodWithHttpInfo($customer_id, $payment_method_id, $version, $authorization, string $contentType = self::contentTypes['customersDeletePaymentMethod'][0])
    {
        $request = $this->customersDeletePaymentMethodRequest($customer_id, $payment_method_id, $version, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersDeletePaymentMethodAsync
     *
     * Remove payment method
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  string $payment_method_id The unique identifier of the customer payment method. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $authorization Basic HTTP authentication to grant access to customer owned resources.  - The required customer secret key is short lived and will expire after pre-configured set of time.  - The customer secret can be generated by calling [POST /customers/{customerId}/create-secret](#operation/Customers_CreateCustomerSecret) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersDeletePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersDeletePaymentMethodAsync($customer_id, $payment_method_id, $version, $authorization, string $contentType = self::contentTypes['customersDeletePaymentMethod'][0])
    {
        return $this->customersDeletePaymentMethodAsyncWithHttpInfo($customer_id, $payment_method_id, $version, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersDeletePaymentMethodAsyncWithHttpInfo
     *
     * Remove payment method
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  string $payment_method_id The unique identifier of the customer payment method. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $authorization Basic HTTP authentication to grant access to customer owned resources.  - The required customer secret key is short lived and will expire after pre-configured set of time.  - The customer secret can be generated by calling [POST /customers/{customerId}/create-secret](#operation/Customers_CreateCustomerSecret) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersDeletePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersDeletePaymentMethodAsyncWithHttpInfo($customer_id, $payment_method_id, $version, $authorization, string $contentType = self::contentTypes['customersDeletePaymentMethod'][0])
    {
        $returnType = '';
        $request = $this->customersDeletePaymentMethodRequest($customer_id, $payment_method_id, $version, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersDeletePaymentMethod'
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  string $payment_method_id The unique identifier of the customer payment method. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $authorization Basic HTTP authentication to grant access to customer owned resources.  - The required customer secret key is short lived and will expire after pre-configured set of time.  - The customer secret can be generated by calling [POST /customers/{customerId}/create-secret](#operation/Customers_CreateCustomerSecret) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersDeletePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customersDeletePaymentMethodRequest($customer_id, $payment_method_id, $version, $authorization, string $contentType = self::contentTypes['customersDeletePaymentMethod'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling customersDeletePaymentMethod'
            );
        }
        if (strlen($customer_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$customer_id" when calling CustomersApi.customersDeletePaymentMethod, must be smaller than or equal to 100.');
        }
        
        // verify the required parameter 'payment_method_id' is set
        if ($payment_method_id === null || (is_array($payment_method_id) && count($payment_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_method_id when calling customersDeletePaymentMethod'
            );
        }
        if (strlen($payment_method_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$payment_method_id" when calling CustomersApi.customersDeletePaymentMethod, must be smaller than or equal to 100.');
        }
        
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling customersDeletePaymentMethod'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling customersDeletePaymentMethod'
            );
        }
        if (strlen($authorization) > 500) {
            throw new \InvalidArgumentException('invalid length for "$authorization" when calling CustomersApi.customersDeletePaymentMethod, must be smaller than or equal to 500.');
        }
        

        $resourcePath = '/customers/public/{customerId}/payment-methods/{paymentMethodId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($version !== null) {
            $headerParams['version'] = ObjectSerializer::toHeaderValue($version);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($payment_method_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersGet
     *
     * Retrieve a customer
     *
     * @param  string $customer_id Unique identifiers for the customers you want to get information about, separated by commas. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersGet'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dojo_PHP\Model\CustomerFull[]|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails
     */
    public function customersGet($customer_id, $version, string $contentType = self::contentTypes['customersGet'][0])
    {
        list($response) = $this->customersGetWithHttpInfo($customer_id, $version, $contentType);
        return $response;
    }

    /**
     * Operation customersGetWithHttpInfo
     *
     * Retrieve a customer
     *
     * @param  string $customer_id Unique identifiers for the customers you want to get information about, separated by commas. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersGet'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dojo_PHP\Model\CustomerFull[]|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersGetWithHttpInfo($customer_id, $version, string $contentType = self::contentTypes['customersGet'][0])
    {
        $request = $this->customersGetRequest($customer_id, $version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Dojo_PHP\Model\CustomerFull[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\CustomerFull[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\CustomerFull[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Dojo_PHP\Model\CustomerFull[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\CustomerFull[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersGetAsync
     *
     * Retrieve a customer
     *
     * @param  string $customer_id Unique identifiers for the customers you want to get information about, separated by commas. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersGetAsync($customer_id, $version, string $contentType = self::contentTypes['customersGet'][0])
    {
        return $this->customersGetAsyncWithHttpInfo($customer_id, $version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersGetAsyncWithHttpInfo
     *
     * Retrieve a customer
     *
     * @param  string $customer_id Unique identifiers for the customers you want to get information about, separated by commas. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersGetAsyncWithHttpInfo($customer_id, $version, string $contentType = self::contentTypes['customersGet'][0])
    {
        $returnType = '\Dojo_PHP\Model\CustomerFull[]';
        $request = $this->customersGetRequest($customer_id, $version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersGet'
     *
     * @param  string $customer_id Unique identifiers for the customers you want to get information about, separated by commas. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customersGetRequest($customer_id, $version, string $contentType = self::contentTypes['customersGet'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling customersGet'
            );
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling customersGet'
            );
        }


        $resourcePath = '/customers/{customerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($version !== null) {
            $headerParams['version'] = ObjectSerializer::toHeaderValue($version);
        }

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersGetPaymentMethods
     *
     * Retrieve payment method
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $authorization Basic HTTP authentication to grant access to customer owned resources.  - The required customer secret key is short lived and will expire after pre-configured set of time.  - The customer secret can be generated by calling [POST /customers/{customerId}/create-secret](#operation/Customers_CreateCustomerSecret) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersGetPaymentMethods'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dojo_PHP\Model\CustomerPaymentMethods|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails
     */
    public function customersGetPaymentMethods($customer_id, $version, $authorization, string $contentType = self::contentTypes['customersGetPaymentMethods'][0])
    {
        list($response) = $this->customersGetPaymentMethodsWithHttpInfo($customer_id, $version, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation customersGetPaymentMethodsWithHttpInfo
     *
     * Retrieve payment method
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $authorization Basic HTTP authentication to grant access to customer owned resources.  - The required customer secret key is short lived and will expire after pre-configured set of time.  - The customer secret can be generated by calling [POST /customers/{customerId}/create-secret](#operation/Customers_CreateCustomerSecret) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersGetPaymentMethods'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dojo_PHP\Model\CustomerPaymentMethods|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersGetPaymentMethodsWithHttpInfo($customer_id, $version, $authorization, string $contentType = self::contentTypes['customersGetPaymentMethods'][0])
    {
        $request = $this->customersGetPaymentMethodsRequest($customer_id, $version, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Dojo_PHP\Model\CustomerPaymentMethods' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\CustomerPaymentMethods' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\CustomerPaymentMethods', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Dojo_PHP\Model\CustomerPaymentMethods';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\CustomerPaymentMethods',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersGetPaymentMethodsAsync
     *
     * Retrieve payment method
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $authorization Basic HTTP authentication to grant access to customer owned resources.  - The required customer secret key is short lived and will expire after pre-configured set of time.  - The customer secret can be generated by calling [POST /customers/{customerId}/create-secret](#operation/Customers_CreateCustomerSecret) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersGetPaymentMethods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersGetPaymentMethodsAsync($customer_id, $version, $authorization, string $contentType = self::contentTypes['customersGetPaymentMethods'][0])
    {
        return $this->customersGetPaymentMethodsAsyncWithHttpInfo($customer_id, $version, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersGetPaymentMethodsAsyncWithHttpInfo
     *
     * Retrieve payment method
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $authorization Basic HTTP authentication to grant access to customer owned resources.  - The required customer secret key is short lived and will expire after pre-configured set of time.  - The customer secret can be generated by calling [POST /customers/{customerId}/create-secret](#operation/Customers_CreateCustomerSecret) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersGetPaymentMethods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersGetPaymentMethodsAsyncWithHttpInfo($customer_id, $version, $authorization, string $contentType = self::contentTypes['customersGetPaymentMethods'][0])
    {
        $returnType = '\Dojo_PHP\Model\CustomerPaymentMethods';
        $request = $this->customersGetPaymentMethodsRequest($customer_id, $version, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersGetPaymentMethods'
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $authorization Basic HTTP authentication to grant access to customer owned resources.  - The required customer secret key is short lived and will expire after pre-configured set of time.  - The customer secret can be generated by calling [POST /customers/{customerId}/create-secret](#operation/Customers_CreateCustomerSecret) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersGetPaymentMethods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customersGetPaymentMethodsRequest($customer_id, $version, $authorization, string $contentType = self::contentTypes['customersGetPaymentMethods'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling customersGetPaymentMethods'
            );
        }
        if (strlen($customer_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$customer_id" when calling CustomersApi.customersGetPaymentMethods, must be smaller than or equal to 100.');
        }
        
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling customersGetPaymentMethods'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling customersGetPaymentMethods'
            );
        }
        if (strlen($authorization) > 500) {
            throw new \InvalidArgumentException('invalid length for "$authorization" when calling CustomersApi.customersGetPaymentMethods, must be smaller than or equal to 500.');
        }
        

        $resourcePath = '/customers/public/{customerId}/payment-methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($version !== null) {
            $headerParams['version'] = ObjectSerializer::toHeaderValue($version);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersSearch
     *
     * List all customers
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  \Dojo_PHP\Model\SearchCustomerRequest $search_customer_request search_customer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersSearch'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dojo_PHP\Model\PagedResultOfCustomer|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails
     */
    public function customersSearch($version, $search_customer_request, string $contentType = self::contentTypes['customersSearch'][0])
    {
        list($response) = $this->customersSearchWithHttpInfo($version, $search_customer_request, $contentType);
        return $response;
    }

    /**
     * Operation customersSearchWithHttpInfo
     *
     * List all customers
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  \Dojo_PHP\Model\SearchCustomerRequest $search_customer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersSearch'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dojo_PHP\Model\PagedResultOfCustomer|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersSearchWithHttpInfo($version, $search_customer_request, string $contentType = self::contentTypes['customersSearch'][0])
    {
        $request = $this->customersSearchRequest($version, $search_customer_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Dojo_PHP\Model\PagedResultOfCustomer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\PagedResultOfCustomer' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\PagedResultOfCustomer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Dojo_PHP\Model\PagedResultOfCustomer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\PagedResultOfCustomer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersSearchAsync
     *
     * List all customers
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  \Dojo_PHP\Model\SearchCustomerRequest $search_customer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersSearchAsync($version, $search_customer_request, string $contentType = self::contentTypes['customersSearch'][0])
    {
        return $this->customersSearchAsyncWithHttpInfo($version, $search_customer_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersSearchAsyncWithHttpInfo
     *
     * List all customers
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  \Dojo_PHP\Model\SearchCustomerRequest $search_customer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersSearchAsyncWithHttpInfo($version, $search_customer_request, string $contentType = self::contentTypes['customersSearch'][0])
    {
        $returnType = '\Dojo_PHP\Model\PagedResultOfCustomer';
        $request = $this->customersSearchRequest($version, $search_customer_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersSearch'
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  \Dojo_PHP\Model\SearchCustomerRequest $search_customer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customersSearchRequest($version, $search_customer_request, string $contentType = self::contentTypes['customersSearch'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling customersSearch'
            );
        }

        // verify the required parameter 'search_customer_request' is set
        if ($search_customer_request === null || (is_array($search_customer_request) && count($search_customer_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search_customer_request when calling customersSearch'
            );
        }


        $resourcePath = '/customers/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($version !== null) {
            $headerParams['version'] = ObjectSerializer::toHeaderValue($version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($search_customer_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($search_customer_request));
            } else {
                $httpBody = $search_customer_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersUpdate
     *
     * Update information about a customer
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  \Dojo_PHP\Model\UpdateCustomerRequest $update_customer_request update_customer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersUpdate'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dojo_PHP\Model\CustomerFull|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails
     */
    public function customersUpdate($customer_id, $version, $update_customer_request, string $contentType = self::contentTypes['customersUpdate'][0])
    {
        list($response) = $this->customersUpdateWithHttpInfo($customer_id, $version, $update_customer_request, $contentType);
        return $response;
    }

    /**
     * Operation customersUpdateWithHttpInfo
     *
     * Update information about a customer
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  \Dojo_PHP\Model\UpdateCustomerRequest $update_customer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersUpdate'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dojo_PHP\Model\CustomerFull|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersUpdateWithHttpInfo($customer_id, $version, $update_customer_request, string $contentType = self::contentTypes['customersUpdate'][0])
    {
        $request = $this->customersUpdateRequest($customer_id, $version, $update_customer_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Dojo_PHP\Model\CustomerFull' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\CustomerFull' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\CustomerFull', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Dojo_PHP\Model\CustomerFull';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\CustomerFull',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersUpdateAsync
     *
     * Update information about a customer
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  \Dojo_PHP\Model\UpdateCustomerRequest $update_customer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersUpdateAsync($customer_id, $version, $update_customer_request, string $contentType = self::contentTypes['customersUpdate'][0])
    {
        return $this->customersUpdateAsyncWithHttpInfo($customer_id, $version, $update_customer_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersUpdateAsyncWithHttpInfo
     *
     * Update information about a customer
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  \Dojo_PHP\Model\UpdateCustomerRequest $update_customer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersUpdateAsyncWithHttpInfo($customer_id, $version, $update_customer_request, string $contentType = self::contentTypes['customersUpdate'][0])
    {
        $returnType = '\Dojo_PHP\Model\CustomerFull';
        $request = $this->customersUpdateRequest($customer_id, $version, $update_customer_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersUpdate'
     *
     * @param  string $customer_id The unique identifier of the customer. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  \Dojo_PHP\Model\UpdateCustomerRequest $update_customer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customersUpdateRequest($customer_id, $version, $update_customer_request, string $contentType = self::contentTypes['customersUpdate'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling customersUpdate'
            );
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling customersUpdate'
            );
        }

        // verify the required parameter 'update_customer_request' is set
        if ($update_customer_request === null || (is_array($update_customer_request) && count($update_customer_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_customer_request when calling customersUpdate'
            );
        }


        $resourcePath = '/customers/{customerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($version !== null) {
            $headerParams['version'] = ObjectSerializer::toHeaderValue($version);
        }

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_customer_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_customer_request));
            } else {
                $httpBody = $update_customer_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
