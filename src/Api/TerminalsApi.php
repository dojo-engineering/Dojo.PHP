<?php
/**
 * TerminalsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Dojo_PHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Unified Payments API
 *
 * # Introduction  The Dojo Universal Payments API (UPAPI) is RESTful. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body.  ## Base URLs  Use the following base URL when making requests to the API: [https://staging-api.dojo.dev/master](https://staging-api.dojo.dev/master)  ## Authentication  The API uses [Basic HTTP auth](https://en.wikipedia.org/wiki/Basic_access_authentication). You can generate API keys in [Developer Portal](https://developer.dojo.tech). Secret keys for the test environment have the prefix `sk_sandbox_` and for production have the prefix `sk_prod_`.  You must include your secret API key in the header of all requests, for example:  ```curl curl   --header 'content-type: application/json' \\   --header 'Authorization: Basic sk_prod_your_key' \\ ... ```  API requests without authentication will fail.  ## Additional Required Headers  The following headers are required on all API requests, requests without them will fail.  `reseller-id` - Identifies the reseller who sells software on behalf of the EPOS company. This value will be unique and provided by Dojo to each reseller.   `software-house-id` - Identifies the EPOS company whose software is generating the request. This value shouldn't be configurable as it will remain the same for all customers using particular EPOS software. This value will be provided by Dojo.  ## HTTP Responses  The API returns standard HTTP response codes [RFC 7231](https://tools.ietf.org/html/rfc7231#section-6) on each request to indicate the success or otherwise of API requests. HTTP status codes summary are listed below:  * `200 OK` — The request was successful.  * `201 Created` — The request was successful, and a new resource was created as a result.  * `204 No Content` — The request was successful, but there is no content to send.  * `400 Bad Request` — Bad request, probably due to a syntax error.  * `401 Unauthorized` — Authentication required.  * `403 Forbidden` — The API key doesn't have permissions.  * `404 Not Found` — The resource doesn't exist.  * `405 Method Not Allowed` — The request method is known by the server but isn't supported by the target resource.  * `409 Conflict`—The request couldn't be completed because it conflicted with another request or the server's configuration.  * `500`, `502`, `503`, `504` `Server Errors` — An unexpected error occurred with our API, please reach out to support.  ## Errors   The API follows the error response format proposed in [RFC 7807](https://tools.ietf.org/html/rfc7807) also known as Problem Details for HTTP APIs. All errors are returned in the form of JSON.  ### Error Schema  In case of an error, the response object contains the following fields: The error object contains the following fields: * `type` [string] — A URI reference RFC 3986 that identifies the problem type.  * `code` [ErrorCode] — A short, machine-readable description of the error.  * `title` [string] — A short, human-readable summary of the error.  * `detail` [string] — A human-readable message giving more details about the error. Not always present.  * `status` [integer] — The HTTP status code.  * `traceId` [string] — The unique identifier of the failing request.  The following example shows a possible error response:  ```json {     \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",     \"code\": \"INVALID_REQUEST\",     \"title\": \"One or more validation errors occurred.\",     \"detail\": \"amount missing\",     \"status\": 400,     \"traceId\": \"00-a405f077df056a498323ffbcec05923f-aa63e6f4dbbc734a-01\", } ```  ## Versioning  Dojo API uses the yyyy-mm-dd API version-naming scheme. You have to pass the version as the `version` header in all API calls, for example:  ``` curl curl   --header 'content-type: application/json' \\   --header 'Authorization: Basic sk_prod_your_key' \\   --header 'version: Pre-release' \\ ```  When [breaking changes](../payments/development-resources/versioning-overview#breaking-changes) are made to the API, the current version listed below will be updated.   The current version is `Pre-release`.
 *
 * The version of the OpenAPI document: 2023-12-15
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dojo_PHP\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Dojo_PHP\ApiException;
use Dojo_PHP\Configuration;
use Dojo_PHP\HeaderSelector;
use Dojo_PHP\ObjectSerializer;

/**
 * TerminalsApi Class Doc Comment
 *
 * @category Class
 * @package  Dojo_PHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TerminalsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'terminalSessionCancel' => [
            'application/json',
        ],
        'terminalSessionCreate' => [
            'application/json',
        ],
        'terminalSessionGet' => [
            'application/json',
        ],
        'terminalSessionSignature' => [
            'application/json',
        ],
        'terminalsGetTerminal' => [
            'application/json',
        ],
        'terminalsListTerminals' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation terminalSessionCancel
     *
     * Request a terminal session to be canceled
     *
     * @param  string $terminal_session_id The unique identifier for the terminal session. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionCancel'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dojo_PHP\Model\TerminalSession|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails
     */
    public function terminalSessionCancel($terminal_session_id, $version, $software_house_id, $reseller_id, string $contentType = self::contentTypes['terminalSessionCancel'][0])
    {
        list($response) = $this->terminalSessionCancelWithHttpInfo($terminal_session_id, $version, $software_house_id, $reseller_id, $contentType);
        return $response;
    }

    /**
     * Operation terminalSessionCancelWithHttpInfo
     *
     * Request a terminal session to be canceled
     *
     * @param  string $terminal_session_id The unique identifier for the terminal session. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionCancel'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dojo_PHP\Model\TerminalSession|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function terminalSessionCancelWithHttpInfo($terminal_session_id, $version, $software_house_id, $reseller_id, string $contentType = self::contentTypes['terminalSessionCancel'][0])
    {
        $request = $this->terminalSessionCancelRequest($terminal_session_id, $version, $software_house_id, $reseller_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Dojo_PHP\Model\TerminalSession' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\TerminalSession' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\TerminalSession', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Dojo_PHP\Model\TerminalSession';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\TerminalSession',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation terminalSessionCancelAsync
     *
     * Request a terminal session to be canceled
     *
     * @param  string $terminal_session_id The unique identifier for the terminal session. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionCancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function terminalSessionCancelAsync($terminal_session_id, $version, $software_house_id, $reseller_id, string $contentType = self::contentTypes['terminalSessionCancel'][0])
    {
        return $this->terminalSessionCancelAsyncWithHttpInfo($terminal_session_id, $version, $software_house_id, $reseller_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation terminalSessionCancelAsyncWithHttpInfo
     *
     * Request a terminal session to be canceled
     *
     * @param  string $terminal_session_id The unique identifier for the terminal session. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionCancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function terminalSessionCancelAsyncWithHttpInfo($terminal_session_id, $version, $software_house_id, $reseller_id, string $contentType = self::contentTypes['terminalSessionCancel'][0])
    {
        $returnType = '\Dojo_PHP\Model\TerminalSession';
        $request = $this->terminalSessionCancelRequest($terminal_session_id, $version, $software_house_id, $reseller_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'terminalSessionCancel'
     *
     * @param  string $terminal_session_id The unique identifier for the terminal session. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionCancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function terminalSessionCancelRequest($terminal_session_id, $version, $software_house_id, $reseller_id, string $contentType = self::contentTypes['terminalSessionCancel'][0])
    {

        // verify the required parameter 'terminal_session_id' is set
        if ($terminal_session_id === null || (is_array($terminal_session_id) && count($terminal_session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $terminal_session_id when calling terminalSessionCancel'
            );
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling terminalSessionCancel'
            );
        }

        // verify the required parameter 'software_house_id' is set
        if ($software_house_id === null || (is_array($software_house_id) && count($software_house_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $software_house_id when calling terminalSessionCancel'
            );
        }

        // verify the required parameter 'reseller_id' is set
        if ($reseller_id === null || (is_array($reseller_id) && count($reseller_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reseller_id when calling terminalSessionCancel'
            );
        }


        $resourcePath = '/terminal-sessions/{terminalSessionId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($version !== null) {
            $headerParams['version'] = ObjectSerializer::toHeaderValue($version);
        }
        // header params
        if ($software_house_id !== null) {
            $headerParams['software-house-id'] = ObjectSerializer::toHeaderValue($software_house_id);
        }
        // header params
        if ($reseller_id !== null) {
            $headerParams['reseller-id'] = ObjectSerializer::toHeaderValue($reseller_id);
        }

        // path params
        if ($terminal_session_id !== null) {
            $resourcePath = str_replace(
                '{' . 'terminalSessionId' . '}',
                ObjectSerializer::toPathValue($terminal_session_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation terminalSessionCreate
     *
     * Create a session on a terminal
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  \Dojo_PHP\Model\CreateTerminalSessionRequest $create_terminal_session_request create_terminal_session_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionCreate'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dojo_PHP\Model\TerminalSession|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails
     */
    public function terminalSessionCreate($version, $software_house_id, $reseller_id, $create_terminal_session_request, string $contentType = self::contentTypes['terminalSessionCreate'][0])
    {
        list($response) = $this->terminalSessionCreateWithHttpInfo($version, $software_house_id, $reseller_id, $create_terminal_session_request, $contentType);
        return $response;
    }

    /**
     * Operation terminalSessionCreateWithHttpInfo
     *
     * Create a session on a terminal
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  \Dojo_PHP\Model\CreateTerminalSessionRequest $create_terminal_session_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionCreate'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dojo_PHP\Model\TerminalSession|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function terminalSessionCreateWithHttpInfo($version, $software_house_id, $reseller_id, $create_terminal_session_request, string $contentType = self::contentTypes['terminalSessionCreate'][0])
    {
        $request = $this->terminalSessionCreateRequest($version, $software_house_id, $reseller_id, $create_terminal_session_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Dojo_PHP\Model\TerminalSession' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\TerminalSession' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\TerminalSession', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Dojo_PHP\Model\TerminalSession';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\TerminalSession',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation terminalSessionCreateAsync
     *
     * Create a session on a terminal
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  \Dojo_PHP\Model\CreateTerminalSessionRequest $create_terminal_session_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function terminalSessionCreateAsync($version, $software_house_id, $reseller_id, $create_terminal_session_request, string $contentType = self::contentTypes['terminalSessionCreate'][0])
    {
        return $this->terminalSessionCreateAsyncWithHttpInfo($version, $software_house_id, $reseller_id, $create_terminal_session_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation terminalSessionCreateAsyncWithHttpInfo
     *
     * Create a session on a terminal
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  \Dojo_PHP\Model\CreateTerminalSessionRequest $create_terminal_session_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function terminalSessionCreateAsyncWithHttpInfo($version, $software_house_id, $reseller_id, $create_terminal_session_request, string $contentType = self::contentTypes['terminalSessionCreate'][0])
    {
        $returnType = '\Dojo_PHP\Model\TerminalSession';
        $request = $this->terminalSessionCreateRequest($version, $software_house_id, $reseller_id, $create_terminal_session_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'terminalSessionCreate'
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  \Dojo_PHP\Model\CreateTerminalSessionRequest $create_terminal_session_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function terminalSessionCreateRequest($version, $software_house_id, $reseller_id, $create_terminal_session_request, string $contentType = self::contentTypes['terminalSessionCreate'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling terminalSessionCreate'
            );
        }

        // verify the required parameter 'software_house_id' is set
        if ($software_house_id === null || (is_array($software_house_id) && count($software_house_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $software_house_id when calling terminalSessionCreate'
            );
        }

        // verify the required parameter 'reseller_id' is set
        if ($reseller_id === null || (is_array($reseller_id) && count($reseller_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reseller_id when calling terminalSessionCreate'
            );
        }

        // verify the required parameter 'create_terminal_session_request' is set
        if ($create_terminal_session_request === null || (is_array($create_terminal_session_request) && count($create_terminal_session_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_terminal_session_request when calling terminalSessionCreate'
            );
        }


        $resourcePath = '/terminal-sessions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($version !== null) {
            $headerParams['version'] = ObjectSerializer::toHeaderValue($version);
        }
        // header params
        if ($software_house_id !== null) {
            $headerParams['software-house-id'] = ObjectSerializer::toHeaderValue($software_house_id);
        }
        // header params
        if ($reseller_id !== null) {
            $headerParams['reseller-id'] = ObjectSerializer::toHeaderValue($reseller_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_terminal_session_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_terminal_session_request));
            } else {
                $httpBody = $create_terminal_session_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation terminalSessionGet
     *
     * Retrieve a terminal session
     *
     * @param  string $terminal_session_id The unique identifier for the terminal session. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionGet'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dojo_PHP\Model\TerminalSession|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails
     */
    public function terminalSessionGet($terminal_session_id, $version, $software_house_id, $reseller_id, string $contentType = self::contentTypes['terminalSessionGet'][0])
    {
        list($response) = $this->terminalSessionGetWithHttpInfo($terminal_session_id, $version, $software_house_id, $reseller_id, $contentType);
        return $response;
    }

    /**
     * Operation terminalSessionGetWithHttpInfo
     *
     * Retrieve a terminal session
     *
     * @param  string $terminal_session_id The unique identifier for the terminal session. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionGet'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dojo_PHP\Model\TerminalSession|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function terminalSessionGetWithHttpInfo($terminal_session_id, $version, $software_house_id, $reseller_id, string $contentType = self::contentTypes['terminalSessionGet'][0])
    {
        $request = $this->terminalSessionGetRequest($terminal_session_id, $version, $software_house_id, $reseller_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Dojo_PHP\Model\TerminalSession' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\TerminalSession' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\TerminalSession', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Dojo_PHP\Model\TerminalSession';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\TerminalSession',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation terminalSessionGetAsync
     *
     * Retrieve a terminal session
     *
     * @param  string $terminal_session_id The unique identifier for the terminal session. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function terminalSessionGetAsync($terminal_session_id, $version, $software_house_id, $reseller_id, string $contentType = self::contentTypes['terminalSessionGet'][0])
    {
        return $this->terminalSessionGetAsyncWithHttpInfo($terminal_session_id, $version, $software_house_id, $reseller_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation terminalSessionGetAsyncWithHttpInfo
     *
     * Retrieve a terminal session
     *
     * @param  string $terminal_session_id The unique identifier for the terminal session. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function terminalSessionGetAsyncWithHttpInfo($terminal_session_id, $version, $software_house_id, $reseller_id, string $contentType = self::contentTypes['terminalSessionGet'][0])
    {
        $returnType = '\Dojo_PHP\Model\TerminalSession';
        $request = $this->terminalSessionGetRequest($terminal_session_id, $version, $software_house_id, $reseller_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'terminalSessionGet'
     *
     * @param  string $terminal_session_id The unique identifier for the terminal session. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function terminalSessionGetRequest($terminal_session_id, $version, $software_house_id, $reseller_id, string $contentType = self::contentTypes['terminalSessionGet'][0])
    {

        // verify the required parameter 'terminal_session_id' is set
        if ($terminal_session_id === null || (is_array($terminal_session_id) && count($terminal_session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $terminal_session_id when calling terminalSessionGet'
            );
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling terminalSessionGet'
            );
        }

        // verify the required parameter 'software_house_id' is set
        if ($software_house_id === null || (is_array($software_house_id) && count($software_house_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $software_house_id when calling terminalSessionGet'
            );
        }

        // verify the required parameter 'reseller_id' is set
        if ($reseller_id === null || (is_array($reseller_id) && count($reseller_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reseller_id when calling terminalSessionGet'
            );
        }


        $resourcePath = '/terminal-sessions/{terminalSessionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($version !== null) {
            $headerParams['version'] = ObjectSerializer::toHeaderValue($version);
        }
        // header params
        if ($software_house_id !== null) {
            $headerParams['software-house-id'] = ObjectSerializer::toHeaderValue($software_house_id);
        }
        // header params
        if ($reseller_id !== null) {
            $headerParams['reseller-id'] = ObjectSerializer::toHeaderValue($reseller_id);
        }

        // path params
        if ($terminal_session_id !== null) {
            $resourcePath = str_replace(
                '{' . 'terminalSessionId' . '}',
                ObjectSerializer::toPathValue($terminal_session_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation terminalSessionSignature
     *
     * Respond to a signature verification request
     *
     * @param  string $terminal_session_id The unique identifier for the terminal session. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  \Dojo_PHP\Model\SignatureVerificationRequest $signature_verification_request signature_verification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionSignature'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dojo_PHP\Model\TerminalSession|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails
     */
    public function terminalSessionSignature($terminal_session_id, $version, $software_house_id, $reseller_id, $signature_verification_request, string $contentType = self::contentTypes['terminalSessionSignature'][0])
    {
        list($response) = $this->terminalSessionSignatureWithHttpInfo($terminal_session_id, $version, $software_house_id, $reseller_id, $signature_verification_request, $contentType);
        return $response;
    }

    /**
     * Operation terminalSessionSignatureWithHttpInfo
     *
     * Respond to a signature verification request
     *
     * @param  string $terminal_session_id The unique identifier for the terminal session. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  \Dojo_PHP\Model\SignatureVerificationRequest $signature_verification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionSignature'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dojo_PHP\Model\TerminalSession|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails|\Dojo_PHP\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function terminalSessionSignatureWithHttpInfo($terminal_session_id, $version, $software_house_id, $reseller_id, $signature_verification_request, string $contentType = self::contentTypes['terminalSessionSignature'][0])
    {
        $request = $this->terminalSessionSignatureRequest($terminal_session_id, $version, $software_house_id, $reseller_id, $signature_verification_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Dojo_PHP\Model\TerminalSession' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\TerminalSession' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\TerminalSession', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Dojo_PHP\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Dojo_PHP\Model\TerminalSession';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\TerminalSession',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation terminalSessionSignatureAsync
     *
     * Respond to a signature verification request
     *
     * @param  string $terminal_session_id The unique identifier for the terminal session. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  \Dojo_PHP\Model\SignatureVerificationRequest $signature_verification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionSignature'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function terminalSessionSignatureAsync($terminal_session_id, $version, $software_house_id, $reseller_id, $signature_verification_request, string $contentType = self::contentTypes['terminalSessionSignature'][0])
    {
        return $this->terminalSessionSignatureAsyncWithHttpInfo($terminal_session_id, $version, $software_house_id, $reseller_id, $signature_verification_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation terminalSessionSignatureAsyncWithHttpInfo
     *
     * Respond to a signature verification request
     *
     * @param  string $terminal_session_id The unique identifier for the terminal session. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  \Dojo_PHP\Model\SignatureVerificationRequest $signature_verification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionSignature'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function terminalSessionSignatureAsyncWithHttpInfo($terminal_session_id, $version, $software_house_id, $reseller_id, $signature_verification_request, string $contentType = self::contentTypes['terminalSessionSignature'][0])
    {
        $returnType = '\Dojo_PHP\Model\TerminalSession';
        $request = $this->terminalSessionSignatureRequest($terminal_session_id, $version, $software_house_id, $reseller_id, $signature_verification_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'terminalSessionSignature'
     *
     * @param  string $terminal_session_id The unique identifier for the terminal session. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  \Dojo_PHP\Model\SignatureVerificationRequest $signature_verification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalSessionSignature'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function terminalSessionSignatureRequest($terminal_session_id, $version, $software_house_id, $reseller_id, $signature_verification_request, string $contentType = self::contentTypes['terminalSessionSignature'][0])
    {

        // verify the required parameter 'terminal_session_id' is set
        if ($terminal_session_id === null || (is_array($terminal_session_id) && count($terminal_session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $terminal_session_id when calling terminalSessionSignature'
            );
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling terminalSessionSignature'
            );
        }

        // verify the required parameter 'software_house_id' is set
        if ($software_house_id === null || (is_array($software_house_id) && count($software_house_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $software_house_id when calling terminalSessionSignature'
            );
        }

        // verify the required parameter 'reseller_id' is set
        if ($reseller_id === null || (is_array($reseller_id) && count($reseller_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reseller_id when calling terminalSessionSignature'
            );
        }

        // verify the required parameter 'signature_verification_request' is set
        if ($signature_verification_request === null || (is_array($signature_verification_request) && count($signature_verification_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature_verification_request when calling terminalSessionSignature'
            );
        }


        $resourcePath = '/terminal-sessions/{terminalSessionId}/signature';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($version !== null) {
            $headerParams['version'] = ObjectSerializer::toHeaderValue($version);
        }
        // header params
        if ($software_house_id !== null) {
            $headerParams['software-house-id'] = ObjectSerializer::toHeaderValue($software_house_id);
        }
        // header params
        if ($reseller_id !== null) {
            $headerParams['reseller-id'] = ObjectSerializer::toHeaderValue($reseller_id);
        }

        // path params
        if ($terminal_session_id !== null) {
            $resourcePath = str_replace(
                '{' . 'terminalSessionId' . '}',
                ObjectSerializer::toPathValue($terminal_session_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($signature_verification_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($signature_verification_request));
            } else {
                $httpBody = $signature_verification_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation terminalsGetTerminal
     *
     * Retrieve a terminal
     *
     * @param  string $terminal_id The unique identifier for the terminal. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalsGetTerminal'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dojo_PHP\Model\Terminal|\Dojo_PHP\Model\Error|\Dojo_PHP\Model\Error|\Dojo_PHP\Model\Error
     */
    public function terminalsGetTerminal($terminal_id, $version, $software_house_id, $reseller_id, string $contentType = self::contentTypes['terminalsGetTerminal'][0])
    {
        list($response) = $this->terminalsGetTerminalWithHttpInfo($terminal_id, $version, $software_house_id, $reseller_id, $contentType);
        return $response;
    }

    /**
     * Operation terminalsGetTerminalWithHttpInfo
     *
     * Retrieve a terminal
     *
     * @param  string $terminal_id The unique identifier for the terminal. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalsGetTerminal'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dojo_PHP\Model\Terminal|\Dojo_PHP\Model\Error|\Dojo_PHP\Model\Error|\Dojo_PHP\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function terminalsGetTerminalWithHttpInfo($terminal_id, $version, $software_house_id, $reseller_id, string $contentType = self::contentTypes['terminalsGetTerminal'][0])
    {
        $request = $this->terminalsGetTerminalRequest($terminal_id, $version, $software_house_id, $reseller_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Dojo_PHP\Model\Terminal' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\Terminal' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\Terminal', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Dojo_PHP\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Dojo_PHP\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Dojo_PHP\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Dojo_PHP\Model\Terminal';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\Terminal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation terminalsGetTerminalAsync
     *
     * Retrieve a terminal
     *
     * @param  string $terminal_id The unique identifier for the terminal. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalsGetTerminal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function terminalsGetTerminalAsync($terminal_id, $version, $software_house_id, $reseller_id, string $contentType = self::contentTypes['terminalsGetTerminal'][0])
    {
        return $this->terminalsGetTerminalAsyncWithHttpInfo($terminal_id, $version, $software_house_id, $reseller_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation terminalsGetTerminalAsyncWithHttpInfo
     *
     * Retrieve a terminal
     *
     * @param  string $terminal_id The unique identifier for the terminal. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalsGetTerminal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function terminalsGetTerminalAsyncWithHttpInfo($terminal_id, $version, $software_house_id, $reseller_id, string $contentType = self::contentTypes['terminalsGetTerminal'][0])
    {
        $returnType = '\Dojo_PHP\Model\Terminal';
        $request = $this->terminalsGetTerminalRequest($terminal_id, $version, $software_house_id, $reseller_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'terminalsGetTerminal'
     *
     * @param  string $terminal_id The unique identifier for the terminal. (required)
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalsGetTerminal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function terminalsGetTerminalRequest($terminal_id, $version, $software_house_id, $reseller_id, string $contentType = self::contentTypes['terminalsGetTerminal'][0])
    {

        // verify the required parameter 'terminal_id' is set
        if ($terminal_id === null || (is_array($terminal_id) && count($terminal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $terminal_id when calling terminalsGetTerminal'
            );
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling terminalsGetTerminal'
            );
        }

        // verify the required parameter 'software_house_id' is set
        if ($software_house_id === null || (is_array($software_house_id) && count($software_house_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $software_house_id when calling terminalsGetTerminal'
            );
        }

        // verify the required parameter 'reseller_id' is set
        if ($reseller_id === null || (is_array($reseller_id) && count($reseller_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reseller_id when calling terminalsGetTerminal'
            );
        }


        $resourcePath = '/terminals/{terminalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($version !== null) {
            $headerParams['version'] = ObjectSerializer::toHeaderValue($version);
        }
        // header params
        if ($software_house_id !== null) {
            $headerParams['software-house-id'] = ObjectSerializer::toHeaderValue($software_house_id);
        }
        // header params
        if ($reseller_id !== null) {
            $headerParams['reseller-id'] = ObjectSerializer::toHeaderValue($reseller_id);
        }

        // path params
        if ($terminal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'terminalId' . '}',
                ObjectSerializer::toPathValue($terminal_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation terminalsListTerminals
     *
     * Retrieve all terminals
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  \Dojo_PHP\Model\TerminalStatus[] $statuses A machine-readable value describing the state of the terminal. Terminals with any of the statuses provided in this parameter will be listed. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalsListTerminals'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dojo_PHP\Model\Terminal[]|\Dojo_PHP\Model\Error
     */
    public function terminalsListTerminals($version, $software_house_id, $reseller_id, $statuses = null, string $contentType = self::contentTypes['terminalsListTerminals'][0])
    {
        list($response) = $this->terminalsListTerminalsWithHttpInfo($version, $software_house_id, $reseller_id, $statuses, $contentType);
        return $response;
    }

    /**
     * Operation terminalsListTerminalsWithHttpInfo
     *
     * Retrieve all terminals
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  \Dojo_PHP\Model\TerminalStatus[] $statuses A machine-readable value describing the state of the terminal. Terminals with any of the statuses provided in this parameter will be listed. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalsListTerminals'] to see the possible values for this operation
     *
     * @throws \Dojo_PHP\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dojo_PHP\Model\Terminal[]|\Dojo_PHP\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function terminalsListTerminalsWithHttpInfo($version, $software_house_id, $reseller_id, $statuses = null, string $contentType = self::contentTypes['terminalsListTerminals'][0])
    {
        $request = $this->terminalsListTerminalsRequest($version, $software_house_id, $reseller_id, $statuses, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Dojo_PHP\Model\Terminal[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\Terminal[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\Terminal[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Dojo_PHP\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dojo_PHP\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dojo_PHP\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Dojo_PHP\Model\Terminal[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\Terminal[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dojo_PHP\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation terminalsListTerminalsAsync
     *
     * Retrieve all terminals
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  \Dojo_PHP\Model\TerminalStatus[] $statuses A machine-readable value describing the state of the terminal. Terminals with any of the statuses provided in this parameter will be listed. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalsListTerminals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function terminalsListTerminalsAsync($version, $software_house_id, $reseller_id, $statuses = null, string $contentType = self::contentTypes['terminalsListTerminals'][0])
    {
        return $this->terminalsListTerminalsAsyncWithHttpInfo($version, $software_house_id, $reseller_id, $statuses, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation terminalsListTerminalsAsyncWithHttpInfo
     *
     * Retrieve all terminals
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  \Dojo_PHP\Model\TerminalStatus[] $statuses A machine-readable value describing the state of the terminal. Terminals with any of the statuses provided in this parameter will be listed. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalsListTerminals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function terminalsListTerminalsAsyncWithHttpInfo($version, $software_house_id, $reseller_id, $statuses = null, string $contentType = self::contentTypes['terminalsListTerminals'][0])
    {
        $returnType = '\Dojo_PHP\Model\Terminal[]';
        $request = $this->terminalsListTerminalsRequest($version, $software_house_id, $reseller_id, $statuses, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'terminalsListTerminals'
     *
     * @param  \DateTime $version The API version with format yyyy-mm-dd. The current version is &#x60;Pre-release&#x60;. (required)
     * @param  string $software_house_id Software house id header (required)
     * @param  string $reseller_id Reseller id header (required)
     * @param  \Dojo_PHP\Model\TerminalStatus[] $statuses A machine-readable value describing the state of the terminal. Terminals with any of the statuses provided in this parameter will be listed. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['terminalsListTerminals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function terminalsListTerminalsRequest($version, $software_house_id, $reseller_id, $statuses = null, string $contentType = self::contentTypes['terminalsListTerminals'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling terminalsListTerminals'
            );
        }

        // verify the required parameter 'software_house_id' is set
        if ($software_house_id === null || (is_array($software_house_id) && count($software_house_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $software_house_id when calling terminalsListTerminals'
            );
        }

        // verify the required parameter 'reseller_id' is set
        if ($reseller_id === null || (is_array($reseller_id) && count($reseller_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reseller_id when calling terminalsListTerminals'
            );
        }



        $resourcePath = '/terminals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($version !== null) {
            $headerParams['version'] = ObjectSerializer::toHeaderValue($version);
        }
        // header params
        if ($software_house_id !== null) {
            $headerParams['software-house-id'] = ObjectSerializer::toHeaderValue($software_house_id);
        }
        // header params
        if ($reseller_id !== null) {
            $headerParams['reseller-id'] = ObjectSerializer::toHeaderValue($reseller_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
